// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id Int @id @default(autoincrement()) //model의 id라는 것을 알려주는 역할
  name String  
  phone String? @unique
  email String? @unique
  avatar String? 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt //유저가 업데이트 될 때마다 field가 변핳거라고 알려준다
  tokens Token[]
  products Product[]
  favs Fav[]
  posts Post[]
  answers Answer[]
  wonderings Wondering[]

}

model Token {
  id Int @id @default(autoincrement())
  payload String @unique
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int // User 전체가 db에 들어가는 것이 아니고 userId가 들어가게된다.
  //prisma는 userId필드가 User모델의 id임을 알고 있다.
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
}

model Product { 
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  image String
  name String
  price Int
  description String @db.MediumText
  favs Fav[]
}

model Fav { 
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId Int
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post { 
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  question String @db.MediumText
  latitude Float?
  longitude Float?
  answers Answer[]
  wondering Wondering[]
}

model Answer { 
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int
  answer String @db.MediumText
}

model Wondering { 
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int
}